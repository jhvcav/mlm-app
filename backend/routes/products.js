const express = require('express');
const router = express.Router();
const Product = require('../models/Product');

// Ajouter un produit
router.post('/', async (req, res) => {
    try {
        const newProduct = new Product(req.body);
        await newProduct.save();
        res.status(201).json(newProduct);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ Route pour r√©cup√©rer la liste des produits
router.get('/', async (req, res) => {
    try {
        console.log("üìå R√©cup√©ration des produits...");

        const products = await Product.find();

        if (!products || products.length === 0) {
            console.log("‚ö†Ô∏è Aucun produit trouv√©.");
            return res.status(404).json({ message: "‚ö†Ô∏è Aucun produit trouv√©." });
        }

        console.log("‚úÖ Produits r√©cup√©r√©s :", products.length);
        res.json(products);
    } catch (err) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des produits :", err);
        res.status(500).json({ error: "Erreur interne du serveur.", details: err.message });
    }
});

// Modifier un produit
router.put('/:id', async (req, res) => {
    try {
        const updatedProduct = await Product.findByIdAndUpdate(
            req.params.id, // R√©cup√®re l'ID du produit
            req.body,      // Met √† jour les champs avec ceux envoy√©s dans la requ√™te
            { new: true }  // Retourne l'objet mis √† jour
        );

        if (!updatedProduct) {
            return res.status(404).json({ error: "Produit non trouv√©" });
        }

        res.json(updatedProduct);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ Route pour qu'un membre souscrive √† un produit
router.post('/subscribe/:productId', async (req, res) => {
    try {
        console.log("üìå Requ√™te re√ßue pour souscription !");
        console.log("üîπ Param√®tres de l'URL :", req.params);
        console.log("üîπ Corps de la requ√™te :", req.body);

        const { memberId, amountInvested, subscriptionDate } = req.body;
        const { productId } = req.params;

        if (!memberId || !productId || !amountInvested || !subscriptionDate) {
            return res.status(400).json({ error: "‚õî L'ID du membre, le montant investi et la date de souscription sont requis." });
        }

        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ error: "‚ùå Produit introuvable." });
        }

        if (product.membersSubscribed.includes(memberId)) {
            return res.status(400).json({ error: "‚ö†Ô∏è Vous √™tes d√©j√† inscrit √† ce produit." });
        }

        // Ajouter le membre √† la liste des abonn√©s
        product.membersSubscribed.push(memberId);

        // V√©rifier si `subscriptions` existe avant d'ajouter
        product.subscriptions = product.subscriptions || [];
        product.subscriptions.push({ memberId, amountInvested, subscriptionDate });

        await product.save();

        res.json({ message: "‚úÖ Souscription r√©ussie !", product });
    } catch (err) {
        console.error("‚ùå Erreur lors de la souscription :", err);
        res.status(500).json({ error: "Erreur interne du serveur.", details: err.message });
    }
});

// Supprimer un produit par ID
router.delete('/:id', async (req, res) => {
    try {
        const deletedProduct = await Product.findByIdAndDelete(req.params.id);

        if (!deletedProduct) {
            return res.status(404).json({ error: "‚ùå Produit non trouv√©." });
        }

        res.json({ message: "‚úÖ Produit supprim√© avec succ√®s." });
    } catch (err) {
        console.error("‚ùå Erreur lors de la suppression du produit :", err);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});

// ‚úÖ R√©cup√©rer les produits souscrits par un membre
router.get('/subscribed/:memberId', async (req, res) => {
    try {
        const { memberId } = req.params;

        // V√©rifier si l'ID du membre est valide
        if (!memberId) {
            return res.status(400).json({ error: "‚õî ID du membre requis." });
        }

        // Trouver tous les produits o√π ce membre est inscrit
        const subscribedProducts = await Product.find({ membersSubscribed: memberId });

        if (subscribedProducts.length === 0) {
            return res.json([]); // Retourne un tableau vide si aucun produit souscrit
        }

        res.json(subscribedProducts);
    } catch (err) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des produits souscrits :", err);
        res.status(500).json({ error: "Erreur interne du serveur.", details: err.message });
    }
});

// ‚úÖ Annuler la souscription √† un produit
router.delete('/unsubscribe/:productId', async (req, res) => {
    try {
        const { productId } = req.params;
        const { memberId } = req.body;

        if (!memberId) {
            return res.status(400).json({ error: "‚õî ID du membre requis." });
        }

        // Retirer le membre de la liste `membersSubscribed`
        const product = await Product.findByIdAndUpdate(
            productId,
            { $pull: { membersSubscribed: memberId, subscriptions: { memberId: memberId } } },
            { new: true }
        );

        if (!product) {
            return res.status(404).json({ error: "‚ùå Produit non trouv√©." });
        }

        res.json({ message: "‚úÖ Souscription annul√©e avec succ√®s.", product });
    } catch (err) {
        console.error("‚ùå Erreur lors de l'annulation de la souscription :", err);
        res.status(500).json({ error: "Erreur interne du serveur.", details: err.message });
    }
});

// ‚úÖ Supprimer une souscription d'un membre √† un produit
router.delete('/unsubscribe/:productId/:memberId', async (req, res) => {
    try {
        const { productId, memberId } = req.params;

        // V√©rifier si le produit existe
        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ error: "‚ùå Produit introuvable." });
        }

        // V√©rifier si le membre est inscrit √† ce produit
        const subscriptionIndex = product.subscriptions.findIndex(sub => sub.memberId.toString() === memberId);
        if (subscriptionIndex === -1) {
            return res.status(404).json({ error: "‚ö†Ô∏è Le membre n'est pas inscrit √† ce produit." });
        }

        // Supprimer la souscription du tableau
        product.subscriptions.splice(subscriptionIndex, 1);

        // Supprimer le membre de la liste `membersSubscribed`
        product.membersSubscribed = product.membersSubscribed.filter(id => id.toString() !== memberId);

        // Sauvegarder les modifications
        await product.save();

        res.json({ message: "‚úÖ Souscription supprim√©e avec succ√®s !" });
    } catch (err) {
        console.error("‚ùå Erreur lors de la suppression de la souscription :", err);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});

// ‚úÖ Obtenir un produit par son ID
router.get('/:productId', async (req, res) => {
    try {
        const product = await Product.findById(req.params.productId);
        if (!product) {
            return res.status(404).json({ error: "‚ùå Produit introuvable." });
        }
        res.json(product);
    } catch (err) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration du produit :", err);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});

// ‚úÖ Modifier une souscription existante
router.put('/update-subscription/:productId', async (req, res) => {
    try {
        const { productId } = req.params;
        const { amountInvested, subscriptionDate, memberId } = req.body;

        if (!memberId) {
            return res.status(400).json({ error: "‚õî ID du membre requis." });
        }

        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ error: "‚ùå Produit non trouv√©." });
        }

        // Met √† jour les donn√©es de la souscription du membre
        const updatedProduct = await Product.findOneAndUpdate(
            { _id: productId, "subscriptions.memberId": memberId },
            { 
                $set: { 
                    "subscriptions.$.amountInvested": amountInvested,
                    "subscriptions.$.subscriptionDate": subscriptionDate
                } 
            },
            { new: true }
        );

        if (!updatedProduct) {
            return res.status(404).json({ error: "‚ùå Souscription non trouv√©e." });
        }

        res.json({ message: "‚úÖ Souscription mise √† jour avec succ√®s.", updatedProduct });
    } catch (err) {
        console.error("‚ùå Erreur lors de la mise √† jour de la souscription :", err);
        res.status(500).json({ error: "Erreur interne du serveur.", details: err.message });
    }
});

module.exports = router;