const express = require("express");
const router = express.Router();
const Member = require("../models/Member");
const Wallet = require('../models/Wallet');


// ‚úÖ R√©cup√©rer la liste des membres
router.get("/", async (req, res) => {
    try {
        const members = await Member.find();
        res.json(members);
    } catch (err) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des membres :", err);
        res.status(500).json({ error: "Erreur serveur." });
    }
});

// ‚úÖ Inscrire un membre (Admin ou Membre)
router.post("/register", async (req, res) => {
    try {
        const { firstName, lastName, email, password, phone, address, role } = req.body;

        if (!firstName || !lastName || !email || !password) {
            return res.status(400).json({ error: "‚ùå Tous les champs Nom, pr√©nom, email et mot de passe sont obligatoires." });
        }

        const existingUser = await Member.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ error: "‚ùå Cet email est d√©j√† utilis√©." });
        }

        const newUser = new Member({
            firstName,
            lastName,
            email,
            password,
            phone,
            address,
            country: country || "Non sp√©cifi√©",// Si country n'est pas fourni, mettre "Non sp√©cifi√©"
            role: role || "member"
        });

        await newUser.save();
        res.status(201).json({ message: "‚úÖ Membre inscrit avec succ√®s !" });
    } catch (err) {
        console.error("üö® Erreur lors de l'inscription :", err);
        res.status(500).json({ error: "‚ùå Erreur serveur." });
    }
});

// ‚úÖ Modifier les permissions d'un membre
router.put("/update-permissions/:id", async (req, res) => {
    try {
        const { permissions } = req.body;
        const { id } = req.params;

        if (!permissions) {
            return res.status(400).json({ error: "‚ùå Aucune permission fournie." });
        }

        const updatedUser = await Member.findByIdAndUpdate(id, { permissions }, { new: true });

        if (!updatedUser) {
            return res.status(404).json({ error: "‚ùå Membre non trouv√©." });
        }

        res.json({ message: "‚úÖ Permissions mises √† jour avec succ√®s.", user: updatedUser });
    } catch (err) {
        console.error("üö® Erreur lors de la mise √† jour des permissions :", err);
        res.status(500).json({ error: "‚ùå Erreur serveur." });
    }
});

// ‚úÖ Supprimer un membre
router.delete('/members/:email', async (req, res) => {
    const { email } = req.params;

    try {
        const deletedMember = await Member.findOneAndDelete({ email });

        if (!deletedMember) {
            return res.status(404).json({ error: "‚ùå Membre non trouv√©." });
        }

        res.json({ message: "‚úÖ Membre supprim√© avec succ√®s." });
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression :", error);
        res.status(500).json({ error: "Erreur serveur" });
    }
});

// ‚úÖ Route pour mettre √† jour un membre par son ID
router.put("/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const updatedMember = await Member.findByIdAndUpdate(id, req.body, { new: true });

        if (!updatedMember) {
            return res.status(404).json({ error: "‚ùå Membre non trouv√©." });
        }

        res.json({ message: "‚úÖ Membre mis √† jour avec succ√®s", member: updatedMember });
    } catch (error) {
        console.error("‚ùå Erreur mise √† jour membre :", error);
        res.status(500).json({ error: "‚ùå Erreur serveur lors de la mise √† jour." });
    }
});

// ‚úÖ Route pour r√©cup√©rer un membre par son ID
router.get("/:id", async (req, res) => {
    try {
        const member = await Member.findById(req.params.id);
        if (!member) {
            return res.status(404).json({ error: "‚ùå Membre non trouv√©." });
        }
        res.json(member);
    } catch (error) {
        console.error("‚ùå Erreur r√©cup√©ration membre :", error);
        res.status(500).json({ error: "‚ùå Erreur serveur." });
    }
});

/// ‚úÖ R√©cup√©rer les affili√©s d'un Sponsor
router.get("/sponsored/:sponsorId", async (req, res) => {
    try {
        const { sponsorId } = req.params;

        // V√©rifie si le sponsor existe
        const sponsor = await Member.findById(sponsorId);
        if (!sponsor) {
            return res.status(404).json({ error: "‚ùå Sponsor non trouv√©." });
        }

        // Recherche les membres qui ont ce sponsorId
        const affiliates = await Member.find({ sponsorId });

        res.json(affiliates);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des affili√©s :", error);
        res.status(500).json({ error: "‚ùå Erreur serveur" });
    }
});

// ‚úÖ Obtenir les affili√©s d'un membre
router.get("/:id/affiliates", async (req, res) => {
    try {
        const { id } = req.params;
        const affiliates = await Member.find({ sponsorId: id });
        res.json(affiliates);
    } catch (error) {
        res.status(500).json({ error: "‚ùå Erreur lors du chargement des affili√©s." });
    }
});

/* ‚úÖ Inscrire un Affili√© (Admin ou Membre) */
router.post("/member/register", async (req, res) => {
    try {
        const { firstName, lastName, email, phone, address, country, password, sponsorId } = req.body;

        // V√©rifier que tous les champs obligatoires sont bien remplis
        if (!firstName || !lastName || !email || !phone ) {
            return res.status(400).json({ error: "‚ùå Tous les champs requis ne sont pas fournis." });
        }

        // V√©rifier si l'email existe d√©j√†
        const existingMember = await Member.findOne({ email });
        if (existingMember) {
            return res.status(400).json({ error: "‚ùå Cet email est d√©j√† utilis√©." });
        }

        // V√©rifier si le sponsor existe
        const sponsor = await Member.findById(sponsorId);
        if (!sponsor) {
            return res.status(400).json({ error: "‚ùå Le sponsor n'existe pas." });
        }

        // Cr√©ation du nouveau membre
        const newMember = new Member({
            firstName,
            lastName,
            email,
            phone,
            address,
            country,
            password,  // ‚ö†Ô∏è Assure-toi que le mot de passe sera hash√© dans un middleware !
            sponsorId,
            createdAt: Date.now() // Ajout automatique de la date du jour de cr√©ation de l'affili√©
        });

        await newMember.save();

        res.status(201).json({ message: "‚úÖ Affili√© enregistr√© avec succ√®s", member: newMember });
    } catch (error) {
        console.error("‚ùå Erreur serveur :", error);
        res.status(500).json({ error: "‚ùå Erreur serveur." });
    }
});

module.exports = router;