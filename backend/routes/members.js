const express = require('express');
const router = express.Router();
const Member = require('../models/Member');
const Wallet = require('../models/Wallet');
const Product = require('../models/Product');

// Fonction pour g√©n√©rer un ID membre unique
const generateMemberId = async () => {
    const randomNumber = Math.floor(10000 + Math.random() * 90000); // G√©n√®re un num√©ro al√©atoire 5 chiffres
    const memberId = `RMR-${randomNumber}`;

    // V√©rifie si l'ID existe d√©j√† dans la base
    const existingMember = await Member.findOne({ memberId });
    if (existingMember) {
        return generateMemberId(); // Reg√©n√®re si l'ID existe d√©j√†
    }
    return memberId;
};

// ‚úÖ Ajouter un membre avec g√©n√©ration d'un ID unique et nouvelles donn√©es
router.post('/', async (req, res) => {
    try {
        let { firstName, name, email, phone, address, city, country, registrationDate, sponsorId, products } = req.body;

        if (!firstName || !name || !email) {
            return res.status(400).json({ error: "‚ùå Pr√©nom, Nom et Email sont obligatoires." });
        }

        // V√©rification et formatage des donn√©es
        sponsorId = sponsorId && sponsorId.trim() !== "" ? sponsorId : null;
        products = Array.isArray(products) ? products.filter(id => id.trim() !== "") : [];
        
        // G√©n√©rer un ID unique pour le membre
        const memberId = await generateMemberId();

        const newMember = new Member({
            memberId, // Ajout de l'ID membre
            firstName,
            name,
            email,
            phone,
            address,
            city,
            country,
            registrationDate: registrationDate || new Date().toISOString().split('T')[0], // Par d√©faut, date du jour
            sponsorId,
            products
        });

        await newMember.save();
        console.log("‚úÖ Membre ajout√© :", newMember);
        res.status(201).json(newMember);
    } catch (err) {
        console.error("‚ùå Erreur lors de l'ajout d'un membre :", err);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});

// ‚úÖ Modifier un membre (y compris les nouvelles donn√©es)
router.put('/:id', async (req, res) => {
    try {
        const { sponsorId, products, ...otherData } = req.body;

        // Convertir sponsorId √† null si vide
        const updatedData = {
            ...otherData,
            sponsorId: sponsorId && sponsorId.trim() !== "" ? sponsorId : null,
            products: Array.isArray(products) ? products.filter(p => p) : []
        };

        const updatedMember = await Member.findByIdAndUpdate(req.params.id, updatedData, { new: true });
        if (!updatedMember) {
            return res.status(404).json({ error: "Membre non trouv√©." });
        }
        res.json(updatedMember);
    } catch (err) {
        console.error("‚ùå Erreur dans PUT /api/members/:id :", err);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});

// ‚úÖ Obtenir tous les membres (et leurs produits et wallets associ√©s)
router.get('/', async (req, res) => {
    try {
        const members = await Member.find()
            .populate('products')
            .populate('wallets');

        console.log("üì° Liste des membres r√©cup√©r√©e :", members.length, "membres.");
        res.json(members);
    } catch (err) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des membres :", err);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});

// ‚úÖ Supprimer un membre et ses wallets associ√©s
router.delete('/:id', async (req, res) => {
    try {
        const member = await Member.findById(req.params.id);
        if (!member) {
            return res.status(404).json({ error: "‚ùå Membre non trouv√©." });
        }

        // Supprimer les wallets associ√©s au membre
        await Wallet.deleteMany({ ownerId: req.params.id });

        // Supprimer le membre
        await Member.findByIdAndDelete(req.params.id);

        console.log("üóëÔ∏è Membre supprim√© :", req.params.id);
        res.json({ message: "‚úÖ Membre et ses wallets associ√©s supprim√©s avec succ√®s." });
    } catch (err) {
        console.error("‚ùå Erreur lors de la suppression d'un membre :", err);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});

// ‚úÖ R√©cup√©rer l'arbre du r√©seau d'un membre
router.get('/network/:memberId', async (req, res) => {
    try {
        const getNetworkTree = async (memberId) => {
            const member = await Member.findById(memberId).select("firstName name").lean();
            if (!member) return null;

            const children = await Member.find({ sponsorId: memberId }).select("firstName name").lean();
            member.children = await Promise.all(children.map(child => getNetworkTree(child._id)));
            return member;
        };

        const networkTree = await getNetworkTree(req.params.memberId);
        if (!networkTree) {
            return res.status(404).json({ error: "‚ùå Membre introuvable." });
        }

        res.json(networkTree);
    } catch (err) {
        console.error("‚ùå Erreur r√©cup√©ration r√©seau :", err);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});

module.exports = router;